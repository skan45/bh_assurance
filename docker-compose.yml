services:
  # --- Backend app ---
  app:
    build: .
    container_name: app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      neo4j2:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
      qdrant:
        condition: service_started
      ollama:
        condition: service_started
    networks:
      - backend
    command: >
      gunicorn -k uvicorn.workers.UvicornWorker app:app
      --bind 0.0.0.0:8000
      --workers 2
      --log-level debug
      --access-logfile -
      --error-logfile -
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # --- PostgreSQL ---
  postgres:
    image: postgres:15
    container_name: bh_postgres2
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - pgdata:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  postgres_exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - backend
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # --- Redis ---
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    command:
      - "--redis.addr=redis:6379"
    ports:
      - "9121:9121"
    networks:
      - backend
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # --- Neo4j ---
  neo4j2:
    image: neo4j:5.25.1
    container_name: neo4j2
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      - NEO4J_AUTH=neo4j/azerty2002
    networks:
      - backend
    volumes:
      - neo4jdata:/data
      - neo4jlogs:/logs
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p azerty2002 'RETURN 1' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # --- Qdrant ---
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant2
    ports:
      - "6333:6333"  # HTTP & metrics
      - "6334:6334"
    networks:
      - backend
    volumes:
      - qdrant_data:/qdrant/storage
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # --- Ollama (LLaMA 2 7B quantized) ---
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    ports:
      - "11434:11434"
    networks:
      - backend
    volumes:
      - ollama_models:/root/.ollama
    command: serve
    deploy:
      resources:
        limits:
          cpus: '20'
          memory: 70G
  ollama-exporter:
    build:
      context: .
      dockerfile: Dockerfile.exporter
    container_name: ollama-exporter
    ports:
      - "8001:8001"
    depends_on:
      - ollama
          

  # --- Prometheus ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - backend
    depends_on:
      - postgres_exporter
      - redis_exporter
      - neo4j2
      - qdrant
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

volumes:
  pgdata:
  neo4jdata:
  neo4jlogs:
  qdrant_data:
  ollama_models:

networks:
  backend:
    driver: bridge

