version: "3.9"

services:
  app:
    build: .
    container_name: app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      neo4j2:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
      qdrant:
        condition: service_started
      ollama:
        condition: service_started
    networks:
      - backend
    command: >
      gunicorn -k uvicorn.workers.UvicornWorker app:app
      --bind 0.0.0.0:8000
      --workers 1
      --log-level debug
      --access-logfile -
      --error-logfile -

  postgres:
    image: postgres:15
    container_name: bh_postgres2
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]

  neo4j2:
    image: neo4j:5.25.1
    container_name: neo4j2
    ports:
      - "7687:7687"
      - "7474:7474"
    environment:
      - NEO4J_AUTH=neo4j/azerty2002
    networks:
      - backend
    volumes:
      - neo4jdata:/data
      - neo4jlogs:/logs
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p azerty2002 'RETURN 1' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant2
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - backend
    volumes:
      - qdrant_data:/qdrant/storage

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    ports:
      - "11434:11434"
    networks:
      - backend
    volumes:
      - ollama_models:/root/.ollama  # persistent model storage
    command: serve

volumes:
  pgdata:
  neo4jdata:
  neo4jlogs:
  qdrant_data:
  ollama_models:

networks:
  backend:
    driver: bridge

